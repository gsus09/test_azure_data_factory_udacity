{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "udacitydemo"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_EmpMaster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NYC_Payroll"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpMaster.csv",
						"folderPath": "dirpayrollfiles",
						"fileSystem": "adlsnycpayroll-martin-t"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_TitleMaster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NYC_Payroll"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TitleMaster.csv",
						"folderPath": "dirpayrollfiles",
						"fileSystem": "adlsnycpayroll-martin-t"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TitleCode",
						"type": "String"
					},
					{
						"name": "TitleDescription",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_nycpayroll_2020')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NYC_Payroll"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "nycpayroll_2020.csv",
						"folderPath": "dirhistoryfiles",
						"fileSystem": "adlsnycpayroll-martin-t"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FiscalYear",
						"type": "String"
					},
					{
						"name": "PayrollNumber",
						"type": "String"
					},
					{
						"name": "AgencyID",
						"type": "String"
					},
					{
						"name": "AgencyName",
						"type": "String"
					},
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "AgencyStartDate",
						"type": "String"
					},
					{
						"name": "WorkLocationBorough",
						"type": "String"
					},
					{
						"name": "TitleCode",
						"type": "String"
					},
					{
						"name": "TitleDescription",
						"type": "String"
					},
					{
						"name": "LeaveStatusasofJune30",
						"type": "String"
					},
					{
						"name": "BaseSalary",
						"type": "String"
					},
					{
						"name": "PayBasis",
						"type": "String"
					},
					{
						"name": "RegularHours",
						"type": "String"
					},
					{
						"name": "RegularGrossPaid",
						"type": "String"
					},
					{
						"name": "OTHours",
						"type": "String"
					},
					{
						"name": "TotalOTPaid",
						"type": "String"
					},
					{
						"name": "TotalOtherPay",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_DirStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "NYC_Payroll"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dirstaging",
						"fileSystem": "adlsnycpayroll-martin-t"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "String"
										},
										"sink": {
											"name": "ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Severity",
											"type": "String"
										},
										"sink": {
											"name": "Severity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Start_Time",
											"type": "String"
										},
										"sink": {
											"name": "Start_Time",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "End_Time",
											"type": "String"
										},
										"sink": {
											"name": "End_Time",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Start_Lat",
											"type": "String"
										},
										"sink": {
											"name": "Start_Lat",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Start_Lng",
											"type": "String"
										},
										"sink": {
											"name": "Start_Lng",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "End_Lat",
											"type": "String"
										},
										"sink": {
											"name": "End_Lat",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "End_Lng",
											"type": "String"
										},
										"sink": {
											"name": "End_Lng",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Distance(mi)",
											"type": "String"
										},
										"sink": {
											"name": "Distance(mi)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Number",
											"type": "String"
										},
										"sink": {
											"name": "Number",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Street",
											"type": "String"
										},
										"sink": {
											"name": "Street",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Side",
											"type": "String"
										},
										"sink": {
											"name": "Side",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String"
										},
										"sink": {
											"name": "City",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "County",
											"type": "String"
										},
										"sink": {
											"name": "County",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String"
										},
										"sink": {
											"name": "State",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Zipcode",
											"type": "String"
										},
										"sink": {
											"name": "Zipcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Timezone",
											"type": "String"
										},
										"sink": {
											"name": "Timezone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Airport_Code",
											"type": "String"
										},
										"sink": {
											"name": "Airport_Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Weather_Timestamp",
											"type": "String"
										},
										"sink": {
											"name": "Weather_Timestamp",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Temperature(F)",
											"type": "String"
										},
										"sink": {
											"name": "Temperature(F)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Wind_Chill(F)",
											"type": "String"
										},
										"sink": {
											"name": "Wind_Chill(F)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Humidity(%)",
											"type": "String"
										},
										"sink": {
											"name": "Humidity(%)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pressure(in)",
											"type": "String"
										},
										"sink": {
											"name": "Pressure(in)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Visibility(mi)",
											"type": "String"
										},
										"sink": {
											"name": "Visibility(mi)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Wind_Direction",
											"type": "String"
										},
										"sink": {
											"name": "Wind_Direction",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Wind_Speed(mph)",
											"type": "String"
										},
										"sink": {
											"name": "Wind_Speed(mph)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Precipitation(in)",
											"type": "String"
										},
										"sink": {
											"name": "Precipitation(in)",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Weather_Condition",
											"type": "String"
										},
										"sink": {
											"name": "Weather_Condition",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Amenity",
											"type": "String"
										},
										"sink": {
											"name": "Amenity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Bump",
											"type": "String"
										},
										"sink": {
											"name": "Bump",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Crossing",
											"type": "String"
										},
										"sink": {
											"name": "Crossing",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Give_Way",
											"type": "String"
										},
										"sink": {
											"name": "Give_Way",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Junction",
											"type": "String"
										},
										"sink": {
											"name": "Junction",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "No_Exit",
											"type": "String"
										},
										"sink": {
											"name": "No_Exit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Railway",
											"type": "String"
										},
										"sink": {
											"name": "Railway",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Roundabout",
											"type": "String"
										},
										"sink": {
											"name": "Roundabout",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Station",
											"type": "String"
										},
										"sink": {
											"name": "Station",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Stop",
											"type": "String"
										},
										"sink": {
											"name": "Stop",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Traffic_Calming",
											"type": "String"
										},
										"sink": {
											"name": "Traffic_Calming",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Traffic_Signal",
											"type": "String"
										},
										"sink": {
											"name": "Traffic_Signal",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Turning_Loop",
											"type": "String"
										},
										"sink": {
											"name": "Turning_Loop",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sunrise_Sunset",
											"type": "String"
										},
										"sink": {
											"name": "Sunrise_Sunset",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Civil_Twilight",
											"type": "String"
										},
										"sink": {
											"name": "Civil_Twilight",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Nautical_Twilight",
											"type": "String"
										},
										"sink": {
											"name": "Nautical_Twilight",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Astronomical_Twilight",
											"type": "String"
										},
										"sink": {
											"name": "Astronomical_Twilight",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-10-23T11:43:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_agg_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_salesorderheader",
								"type": "DatasetReference"
							},
							"name": "sourcesalesorderheader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseSalesAggreate",
								"type": "DatasetReference"
							},
							"name": "sinkAzureSynapseSalesAggreate",
							"rejectedDataLinkedService": {
								"referenceName": "ls_AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcesalesorderheader",
						"sourcesalesorderheader filter(SalesOrderID != 71774) ~> filter1",
						"filter1 derive(TotalSales = SubTotal+TaxAmt+Freight) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          TotalSales as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkAzureSynapseSalesAggreate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_agg_sales_param')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_salesorderheader",
								"type": "DatasetReference"
							},
							"name": "sourcesalesorderheader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseSalesAggreate",
								"type": "DatasetReference"
							},
							"name": "sinkAzureSynapseSalesAggreate",
							"rejectedDataLinkedService": {
								"referenceName": "ls_AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     invalidSalesOrderID as integer (71774)",
						"}",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcesalesorderheader",
						"sourcesalesorderheader filter(SalesOrderID != $invalidSalesOrderID) ~> filter1",
						"filter1 derive(TotalSales = SubTotal+TaxAmt+Freight) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          TotalSales as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkAzureSynapseSalesAggreate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_customer",
								"type": "DatasetReference"
							},
							"name": "sourcesqlcustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_AzureSynapse_customer",
								"type": "DatasetReference"
							},
							"name": "sinkcustomer"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcesqlcustomer",
						"sourcesqlcustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkcustomer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_salesorderheader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_salesorderheader",
								"type": "DatasetReference"
							},
							"name": "sourcetablesalesorderheader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ls_AzureSynapse_salesorderheader",
								"type": "DatasetReference"
							},
							"name": "sinksynapsesalesordertable"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcetablesalesorderheader",
						"sourcetablesalesorderheader sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinksynapsesalesordertable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_sqldb_customer",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ds_sqldb_customer",
							"dataset": {
								"referenceName": "ds_sqldb_customer",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_sqldb_customer = let AdfDoc = Sql.Database(\"udacitydemo202510.database.windows.net\", \"udacitydemo\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"SalesLT\",Item=\"Customer\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"ds_sqldb_customer\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_payroll_2020')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NYC_Payroll"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_nycpayroll_2020",
								"type": "DatasetReference"
							},
							"name": "payroll2020csv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Payroll_Data_2020",
								"type": "DatasetReference"
							},
							"name": "payroll2020sql"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          FiscalYear as string,",
						"          PayrollNumber as string,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as string,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as string,",
						"          PayBasis as string,",
						"          RegularHours as string,",
						"          RegularGrossPaid as string,",
						"          OTHours as string,",
						"          TotalOTPaid as string,",
						"          TotalOtherPay as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> payroll2020csv",
						"payroll2020csv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FiscalYear,",
						"          PayrollNumber,",
						"          AgencyID,",
						"          AgencyName,",
						"          EmployeeID,",
						"          LastName,",
						"          FirstName,",
						"          AgencyStartDate,",
						"          WorkLocationBorough,",
						"          TitleCode,",
						"          TitleDescription,",
						"          LeaveStatusasofJune30,",
						"          BaseSalary,",
						"          PayBasis,",
						"          RegularHours,",
						"          RegularGrossPaid,",
						"          OTHours,",
						"          TotalOTPaid,",
						"          TotalOtherPay",
						"     )) ~> payroll2020sql"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_nycpayroll_2020')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_payroll_2021')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NYC_Payroll"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_nycpayroll_2021",
								"type": "DatasetReference"
							},
							"name": "payroll2021csv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Payroll_Data_2021",
								"type": "DatasetReference"
							},
							"name": "payroll2021sql"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          FiscalYear as string,",
						"          PayrollNumber as string,",
						"          AgencyCode as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as string,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as string,",
						"          PayBasis as string,",
						"          RegularHours as string,",
						"          RegularGrossPaid as string,",
						"          OTHours as string,",
						"          TotalOTPaid as string,",
						"          TotalOtherPay as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> payroll2021csv",
						"payroll2021csv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyCode as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FiscalYear,",
						"          PayrollNumber,",
						"          AgencyCode,",
						"          AgencyName,",
						"          EmployeeID,",
						"          LastName,",
						"          FirstName,",
						"          AgencyStartDate,",
						"          WorkLocationBorough,",
						"          TitleCode,",
						"          TitleDescription,",
						"          LeaveStatusasofJune30,",
						"          BaseSalary,",
						"          PayBasis,",
						"          RegularHours,",
						"          RegularGrossPaid,",
						"          OTHours,",
						"          TotalOTPaid,",
						"          TotalOtherPay",
						"     )) ~> payroll2021sql"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_agency')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NYC_Payroll"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_AgencyMaster",
								"type": "DatasetReference"
							},
							"name": "AgencyMastercsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Agency_md",
								"type": "DatasetReference"
							},
							"name": "AgencySQL"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          AgencyID as string,",
						"          AgencyName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AgencyMastercsv",
						"AgencyMastercsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AgencyID as string,",
						"          AgencyName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AgencySQL"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_title')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NYC_Payroll"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_TitleMaster",
								"type": "DatasetReference"
							},
							"name": "titleMasterCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_title_md",
								"type": "DatasetReference"
							},
							"name": "titleSQL"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          TitleCode as string,",
						"          TitleDescription as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> titleMasterCSV",
						"titleMasterCSV sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TitleCode as string,",
						"          TitleDescription as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> titleSQL"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_TitleMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_emp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NYC_Payroll"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_EmpMaster",
								"type": "DatasetReference"
							},
							"name": "empMasterCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_emp_md",
								"type": "DatasetReference"
							},
							"name": "empSQL"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empMasterCSV",
						"empMasterCSV sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> empSQL"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_EmpMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NYC_Payroll"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Payroll_Data_2020",
								"type": "DatasetReference"
							},
							"name": "payroll2020SQL"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Payroll_Data_2021",
								"type": "DatasetReference"
							},
							"name": "payroll2021SQL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Payroll_Summary",
								"type": "DatasetReference"
							},
							"name": "SummarySQL"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText_DirStaging",
								"type": "DatasetReference"
							},
							"name": "DirStagingCSV"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumnTotalPaid"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dataflow_param_fiscalyear as integer (2020)",
						"}",
						"source(output(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyID as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> payroll2020SQL",
						"source(output(",
						"          FiscalYear as integer,",
						"          PayrollNumber as integer,",
						"          AgencyCode as string,",
						"          AgencyName as string,",
						"          EmployeeID as string,",
						"          LastName as string,",
						"          FirstName as string,",
						"          AgencyStartDate as date,",
						"          WorkLocationBorough as string,",
						"          TitleCode as string,",
						"          TitleDescription as string,",
						"          LeaveStatusasofJune30 as string,",
						"          BaseSalary as double,",
						"          PayBasis as string,",
						"          RegularHours as double,",
						"          RegularGrossPaid as double,",
						"          OTHours as double,",
						"          TotalOTPaid as double,",
						"          TotalOtherPay as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> payroll2021SQL",
						"payroll2020SQL, payroll2021SQL union(byName: true)~> union1",
						"union1 filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> filter1",
						"filter1 derive(TotalPaid = RegularGrossPaid + TotalOTPaid + TotalOtherPay) ~> derivedColumnTotalPaid",
						"derivedColumnTotalPaid aggregate(groupBy(AgencyName,",
						"          FiscalYear),",
						"     total = sum(TotalPaid)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FiscalYear as integer,",
						"          AgencyName as string,",
						"          TotalPaid as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SummarySQL",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DirStagingCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_DirStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow sales order header",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_salesorderheader",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcetablesalesorderheader": {},
									"sinksynapsesalesordertable": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "udacitydemo52025/Staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Data flow sales order header",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcesqlcustomer": {},
									"sinkcustomer": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "udacitydemo52025/Staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-10-23T10:21:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_salesorderheader')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_test_agg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_agg_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_agg_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcesalesorderheader": {},
									"sinkAzureSynapseSalesAggreate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "udacitydemo52025/Staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-10-23T09:01:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_agg_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_NYC_payroll')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_agency",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_agency",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AgencyMastercsv": {},
									"AgencySQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dataflow_emp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_emp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empMasterCSV": {},
									"empSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dataflow_title",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_title",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"titleMasterCSV": {},
									"titleSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dataflow_payroll2020",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dataflow_agency",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "dataflow_emp",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "dataflow_title",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_payroll_2020",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"payroll2020csv": {},
									"payroll2020sql": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dataflow_payroll2021",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dataflow_agency",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "dataflow_emp",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "dataflow_title",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_payroll_2021",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"payroll2021csv": {},
									"payroll2021sql": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dataflow_payroll2020",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "dataflow_payroll2021",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_summary",
								"type": "DataFlowReference",
								"parameters": {
									"dataflow_param_fiscalyear": {
										"value": "@pipeline().parameters.pipeline_param_fiscalyear",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"payroll2020SQL": {},
									"payroll2021SQL": {},
									"SummarySQL": {},
									"DirStagingCSV": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pipeline_param_fiscalyear": {
						"type": "int",
						"defaultValue": 2020
					}
				},
				"folder": {
					"name": "NYC_Payroll"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_agency')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_emp')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_title')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_payroll_2020')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_payroll_2021')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_summary')]"
			]
		}
	]
}